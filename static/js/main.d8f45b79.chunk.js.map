{"version":3,"sources":["App.module.css","Components/InputSetting.module.css","Components/Input.module.css","Components/Button.module.css","Components/Button.tsx","Components/Input.tsx","Components/InputSetting.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ButtonComp","props","className","s","button","onClick","clickOnButton","disabled","disabledButton","value","title","InputComp","maxValue","active","InputSettingComp","block","onChange","App","useState","setValue","newMaxValue","newMinValue","body","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,KAAO,oB,gBCA7ED,EAAOC,QAAU,CAAC,OAAS,6BAA6B,SAAW,+BAA+B,MAAQ,8B,kBCA1GD,EAAOC,QAAU,CAAC,OAAS,sBAAsB,SAAW,0B,iBCA5DD,EAAOC,QAAU,CAAC,OAAS,yB,qJCOdC,EAAa,SAACC,GACvB,OAEI,qBAAKC,UAAWC,IAAEC,OAAlB,SACA,wBAAQC,QAASJ,EAAMK,cAAeC,SAAUN,EAAMO,eAAeP,EAAMQ,OAA3E,SAAoFR,EAAMS,W,gBCLrFC,EAAY,SAACV,GACtB,OACI,uBAAOC,UAAYD,EAAMQ,QAAQR,EAAMW,SAAYT,IAAEI,SAAUJ,IAAEU,OAC1DJ,MAAOR,EAAMQ,S,gBCFfK,EAAmB,SAACb,GAK7B,OACI,sBAAKC,UAAWC,IAAEY,MAAlB,UACI,+BAAOd,EAAMS,QACb,uBAAOR,UAAYD,EAAMQ,MAAQ,EAAKN,IAAEI,SAAWJ,IAAEU,OAC9CG,SARG,aASHP,MAAOR,EAAMQ,YCyEjBQ,MApFf,WAAgB,IAAD,EACeC,mBAAiB,GADhC,mBACJT,EADI,KACGU,EADH,OAKyBD,mBAFX,GAHd,mBAKJE,EALI,aAQyBF,mBANX,IAFd,mBAQJG,EARI,KA6BX,OA7BW,KA8BP,sBAAKnB,UAAWC,IAAEc,IAAlB,UACI,gCACI,yCACA,sBAAKf,UAAWC,IAAEmB,KAAlB,UACI,cAAC,EAAD,CACIb,MAAOA,EACPG,SAjCK,IAoCT,sBAAKV,UAAWC,IAAEoB,OAAlB,UACI,cAAC,EAAD,CACIjB,cA7BN,WAVO,GAWLG,GAASA,EAVJ,GAWjBU,EAASV,EAAQ,IA4BDC,MAAO,MACPD,MAAOA,EACPD,eAnBE,SAACC,GAAD,QAtBD,IAsBuBA,MAqB5B,cAAC,EAAD,CAEIH,cA/BJ,WAChBa,EAhBqB,IA+CDT,MAAO,QACPD,MAAOA,EACPD,eAzBI,SAACC,GAAD,QAAgC,IAAVA,eA8B1C,gCACI,0CACA,sBAAKP,UAAWC,IAAEmB,KAAlB,UACI,cAAC,EAAD,CACIb,MAAOW,EACPV,MAAO,gBAEX,cAAC,EAAD,CACID,MAAOY,EACPX,MAAO,gBAGX,qBAAKR,UAAWC,IAAEoB,OAAlB,SACI,cAAC,EAAD,CACIjB,cAlDN,WACda,EAnBqB,IAqEDT,MAAO,MACPD,MAAOA,EACPD,eA9CE,SAACC,GAAD,SAAsBA,EAAQ,kBCpB7Ce,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.d8f45b79.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__DSHFI\",\"Button\":\"App_Button__iCb0E\",\"body\":\"App_body__2snDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"InputSetting_active__39Q2U\",\"disabled\":\"InputSetting_disabled__3ykkJ\",\"block\":\"InputSetting_block__1Oqi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Input_active__1OKXF\",\"disabled\":\"Input_disabled__2R7ZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__VXR0I\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\nexport type ButtonCompType = {\r\n    title: string\r\n    clickOnButton: () => void\r\n    value: number\r\n    disabledButton: (value:number)=>boolean\r\n}\r\nexport const ButtonComp = (props: ButtonCompType) => {\r\n    return (\r\n\r\n        <div className={s.button}>\r\n        <button onClick={props.clickOnButton} disabled={props.disabledButton(props.value)}>{props.title}</button>\r\n        </div>\r\n)\r\n}","\r\nimport React from 'react';\r\nimport s from './Input.module.css';\r\nexport type InputCompType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\nexport const InputComp = (props: InputCompType) => {\r\n    return (\r\n        <input className={(props.value===props.maxValue) ? s.disabled: s.active}\r\n               value={props.value}/>\r\n    )\r\n}","import React from 'react';\r\nimport s from './InputSetting.module.css';\r\n\r\nexport type InputCompType = {\r\n    value: number\r\n    title: string\r\n    //changeValue:(value:number)=>void\r\n}\r\nexport const InputSettingComp = (props: InputCompType) => {\r\n    const changeValue=()=>{\r\n\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <span>{props.title}</span>\r\n            <input className={(props.value < 0) ? s.disabled : s.active}\r\n                   onChange={changeValue}\r\n                   value={props.value}\r\n            />\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {ButtonComp} from \"./Components/Button\";\nimport {InputComp} from \"./Components/Input\";\nimport {InputSettingComp} from \"./Components/InputSetting\";\n\n\nfunction App() {\n    const [value, setValue] = useState<number>(0)\n    const minValue: number = 0;\n    const maxValue: number = 5;\n\n    const [newMaxValue, setNewMaxValue]=useState<number>(maxValue)\n   //const newMaxValueMax: number > newMinValue;\n\n    const [newMinValue, setNewMinValue]=useState<number>(minValue)\n    const newMinValueMin: number = 0;\n\n\n    const incButton = () => {\n        if (minValue <= value && value < maxValue) {\n            setValue(value + 1)\n        }\n    }\n    const resetButton = () => {\n        setValue(minValue)\n    }\n    const setButton = () => {\n        setValue(minValue)\n    }\n\n\n    const disabledIncButton = (value: number) => !!(value === maxValue)\n    const disabledResetButton = (value: number) => !!(value === 0)\n    const disabledSetButton = (value: number) => !!(value < 0)\n\n    return (\n        <div className={s.App}>\n            <div>\n                <h1>Counter</h1>\n                <div className={s.body}>\n                    <InputComp\n                        value={value}\n                        maxValue={maxValue}\n                    />\n\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={incButton}\n                            title={'inc'}\n                            value={value}\n                            disabledButton={disabledIncButton}\n                        />\n                        <ButtonComp\n\n                            clickOnButton={resetButton}\n                            title={'reset'}\n                            value={value}\n                            disabledButton={disabledResetButton}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <h1>Settings</h1>\n                <div className={s.body}>\n                    <InputSettingComp\n                        value={newMaxValue}\n                        title={'max value: '}\n                    />\n                    <InputSettingComp\n                        value={newMinValue}\n                        title={'min value: '}\n                    />\n\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={setButton}\n                            title={'set'}\n                            value={value}\n                            disabledButton={disabledSetButton}\n                        />\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}