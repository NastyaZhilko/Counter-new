{"version":3,"sources":["App.module.css","Components/Input.module.css","Components/InputSetting.module.css","Components/Button.module.css","Components/Button.tsx","Components/Input.tsx","Components/InputSetting.tsx","LocalStorage/LocalStarage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ButtonComp","props","className","s","button","onClick","clickOnButton","disabled","disabledButton","title","InputComp","input","error","active","value","maxValue","InputSettings","block","onChange","e","changeValue","Number","currentTarget","type","restoreState","obj","localStorage","getItem","JSON","parse","App","useState","start","counter","setCounter","startValue","setStartValue","max","setMaxValue","disabledSet","setDisableSet","disabledInc","setDisableInc","disabledReset","setDisableReset","setError","forError","body","Button","setItem","stringify","saveValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ca8bfcad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__DSHFI\",\"Button\":\"App_Button__iCb0E\",\"body\":\"App_body__2snDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Input_active__1OKXF\",\"disabled\":\"Input_disabled__2R7ZD\",\"input\":\"Input_input__3DBv5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"InputSetting_active__39Q2U\",\"disabled\":\"InputSetting_disabled__3ykkJ\",\"block\":\"InputSetting_block__1Oqi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__VXR0I\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\nexport type ButtonCompType = {\r\n    clickOnButton: () => void\r\n    title: string\r\n    disabledButton: boolean\r\n}\r\nexport const ButtonComp = (props:ButtonCompType) => {\r\n    return (\r\n\r\n        <div className={s.button}>\r\n        <button onClick={props.clickOnButton} disabled={props.disabledButton}>{props.title}</button>\r\n        </div>\r\n)\r\n}","\r\nimport React from 'react';\r\nimport s from './Input.module.css';\r\nexport type InputCompType = {\r\n    value: number\r\n    maxValue: number\r\n    error: string\r\n\r\n}\r\nexport const InputComp = (props: InputCompType) => {\r\n    return (\r\n        <div className={s.input}>\r\n            {props.error ? <h3 className={props.error === 'Incorrect value' ? s.disabled : s.active}>{props.error}</h3>\r\n                :<h3 className={(props.value === props.maxValue) ? s.disabled : s.active}>{props.value}</h3>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './InputSetting.module.css';\r\n\r\n\r\nexport type InputSettingsType = {\r\n    title: string\r\n    value: number|string\r\n    changeValue:(value: number) => void\r\n\r\n}\r\n\r\n\r\nexport const InputSettings = (props: InputSettingsType) => {\r\n    const onChangeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeValue(Number(e.currentTarget.value))\r\n    }\r\n    return (\r\n        <div className={s.block}>\r\n            <span>{props.title}</span>\r\n             <input className={(props.value < 0 ) ? s.disabled : s.active}\r\n                   onChange={onChangeValue}\r\n                   value={props.value}\r\n                   type={'number'}/>\r\n        </div>\r\n    )\r\n}\r\n","export const saveValue =(maxValue: number, startValue:number|string)=>{\r\n    let obj={\r\n        'max':maxValue,\r\n        'start':startValue\r\n    }\r\n    localStorage.setItem('counter', JSON.stringify(obj))\r\n}\r\nexport const restoreState=()=>{\r\n    let obj=localStorage.getItem('counter')\r\n    return obj ? JSON.parse(obj):{'max':null, 'start':null}\r\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {ButtonComp} from \"./Components/Button\";\nimport {InputComp} from \"./Components/Input\";\nimport {InputSettings} from \"./Components/InputSetting\";\nimport {restoreState, saveValue} from \"./LocalStorage/LocalStarage\";\n\nfunction App() {\n    const errorMes: string = 'Incorrect value'\n    const setMess: string = \"enter values and press 'set'\"\n\n    const [counter, setCounter] = useState<number>(restoreState().start)//значение счетчика(инит. значение = startValue сохраненноев localStorage)\n    const [startValue, setStartValue] = useState<number>(restoreState().start)//стартовое значение в блоке настроек\n    const [maxValue, setMaxValue] = useState<number>(restoreState().max)//максимальное значение в блоке настроек\n    const [disabledSet, setDisableSet] = useState<boolean>(true)//булево значение определяет активность кнопки Set\n    const [disabledInc, setDisableInc] = useState<boolean>(false)//булево значение определяет активность кнопки Inc\n    const [disabledReset, setDisableReset] = useState<boolean>(true)//булево значение определяет активность кнопки Reset\n    const [error, setError] = useState<string>('')//\n\n\n    const forError =(startValue: number, maxValue: number)=> {\n        if (maxValue <= startValue || startValue < 0) {\n            setError(errorMes)\n            setDisableSet(true)\n        } else {\n            setError(setMess)\n            setDisableSet(false)\n        }\n    }\n\n    const changeStartValue = (startValue: number) => {\n        forError(startValue,maxValue)\n        setStartValue(startValue)\n        setDisableReset(true)\n        setDisableInc(true)\n\n    }//меняем стартовое значение\n    const changeMaxValue = (maxValue: number) => {\n        forError(startValue,maxValue)\n        setMaxValue(maxValue)\n        setDisableReset(true)\n        setDisableInc(true)\n\n    }//меняем максимальное значение\n    const incButton = () => {\n        if (counter < maxValue) {\n            setCounter(Number(counter) + 1)\n            setDisableReset(false)\n        } else if (counter === maxValue) {\n            setDisableInc(true)\n        }\n    }  //увеличиваем значение на 1 при нажание ни кнопку \"inc\"\n\n    const resetButton = () => {\n        setCounter(startValue)\n        setDisableReset(true)\n        setDisableInc(false)\n    }//возвращаем стартовое значение при нажатии на кнопку \"reset\"\n\n    const setButton = () => {\n        setError('')\n        setCounter(startValue)\n        saveValue(maxValue, startValue)\n        setDisableSet(true)\n        setDisableReset(true)\n        setDisableInc(false)\n    }//отправляем новое стартовое значение в коунтер\n\n    return (\n        <div className={s.App}>\n            <div>\n                <h1>Settings</h1>\n                <div className={s.body}>\n                    <InputSettings\n                        value={maxValue}\n                        title={'max value:'}\n                        changeValue={changeMaxValue}\n                    />\n                    <InputSettings\n                        value={startValue}\n                        title={'start value:'}\n                        changeValue={changeStartValue}\n                    />\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={setButton}\n                            title={'set'}\n                            disabledButton={disabledSet}\n                        />\n                    </div>\n                </div>\n            </div>\n            <div>\n                <h1>Counter</h1>\n                <div className={s.body}>\n                    <InputComp\n                        value={counter}\n                        maxValue={maxValue}\n                        error={error}\n                    />\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={incButton}\n                            title={'inc'}\n                            disabledButton={disabledInc}\n                        />\n                        <ButtonComp\n                            clickOnButton={resetButton}\n                            title={'reset'}\n                            disabledButton={disabledReset}\n                        />\n                    </div>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}