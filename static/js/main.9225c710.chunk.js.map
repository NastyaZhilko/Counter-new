{"version":3,"sources":["Components/InputSetting.module.css","App.module.css","Components/Input.module.css","Components/Button.module.css","Components/Button.tsx","Components/Input.tsx","Components/EditableSpan.tsx","Components/InputSetting.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","ButtonComp","props","className","s","button","onClick","clickOnButton","disabled","disabledButton","value","title","InputComp","maxValue","active","EditableSpan","useState","editMode","setEditMode","setValue","onChange","e","Number","currentTarget","onBlur","type","InputMinComp","block","newValue","changeInValueMin","InputMaxComp","changeInValueMax","App","id","minValue","counter","setCounter","body","Button","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9225c710.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"InputSetting_active__39Q2U\",\"disabled\":\"InputSetting_disabled__3ykkJ\",\"block\":\"InputSetting_block__1Oqi2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__DSHFI\",\"Button\":\"App_Button__iCb0E\",\"body\":\"App_body__2snDU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"Input_active__1OKXF\",\"disabled\":\"Input_disabled__2R7ZD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__VXR0I\"};","import React from 'react';\r\nimport s from './Button.module.css';\r\nexport type ButtonCompType = {\r\n    title: string\r\n    clickOnButton: () => void\r\n    value: number\r\n    disabledButton: (value:number)=>boolean\r\n}\r\nexport const ButtonComp = (props: ButtonCompType) => {\r\n    return (\r\n\r\n        <div className={s.button}>\r\n        <button onClick={props.clickOnButton} disabled={props.disabledButton(props.value)}>{props.title}</button>\r\n        </div>\r\n)\r\n}","\r\nimport React from 'react';\r\nimport s from './Input.module.css';\r\nexport type InputCompType = {\r\n    value: number\r\n    maxValue: number\r\n}\r\nexport const InputComp = (props: InputCompType) => {\r\n    return (\r\n        <input className={(props.value===props.maxValue) ? s.disabled: s.active}\r\n               value={props.value}/>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from \"./InputSetting.module.css\";\r\n\r\n\r\nexport type EditableSpanType = {\r\n    value: number\r\n    onChange: (newValue:number)=>void\r\n}\r\n\r\nexport const EditableSpan = (props: EditableSpanType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [value, setValue] = useState(props.value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setValue(props.value);\r\n    }\r\n    const activateViewMode=()=>{\r\n    setEditMode(false)\r\n        props.onChange(value)\r\n}\r\n\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(Number(e.currentTarget.value))\r\n    }\r\n\r\n    return editMode\r\n        ? <input value={value} onChange={changeValue} onBlur={activateViewMode} type={'number'} className={(props.value < 0) ? s.disabled : s.active}/>\r\n        : <span onClick={activateEditMode}>{props.value}</span>\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './InputSetting.module.css';\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type InputMinCompType = {\r\n    title: string\r\n    value: number\r\n    changeInValueMin: (newValueMin: number) => void\r\n}\r\nexport type InputMaxCompType = {\r\n    value: number\r\n    title: string\r\n    changeInValueMax:(newValueMax: number) => void\r\n}\r\n\r\nexport const InputMinComp = (props: InputMinCompType) => {\r\n    const onChangeHandlerMin = (newValue: number) => {\r\n        props.changeInValueMin(newValue)\r\n    }\r\n\r\n    return (\r\n        <div className={s.block}>\r\n            <span>{props.title}</span>\r\n           {/* <input className={(props.value < 0) ? s.disabled : s.active}\r\n                   value={props.value}\r\n                //onChange={onChangeHandler} type={'number'}\r\n            />*/}\r\n            <EditableSpan  value={props.value} onChange={onChangeHandlerMin}/>\r\n        </div>\r\n    )\r\n}\r\nexport const InputMaxComp = (props: InputMaxCompType) => {\r\n    const onChangeHandlerMax = (newValue:number) => {\r\n        props.changeInValueMax(newValue)\r\n    }\r\nreturn (\r\n        <div className={s.block}>\r\n            <span>{props.title}</span>\r\n           {/* <input className={(props.value < 0) ? s.disabled : s.active}\r\n                   //onChange={changeValue}\r\n                   value={props.value}\r\n                   type={'number'}*/}\r\n            <EditableSpan value={props.value} onChange={onChangeHandlerMax}/>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\nimport s from './App.module.css';\nimport {ButtonComp} from \"./Components/Button\";\nimport {InputComp} from \"./Components/Input\";\nimport {InputMinComp, InputMaxComp} from \"./Components/InputSetting\";\n\n\ntype CounterType = {\n    id: number\n    minValue: number\n    maxValue: number\n}\n\nfunction App() {\n\n    const [counter, setCounter] = useState<CounterType>({id: 1, minValue: 0, maxValue: 5})//создала объект коунтер\n\n    const [value, setValue] = useState<number>(0)\n    let minValue: number = counter.minValue; //инициализационное значение приравниваю значению в объекте\n    let maxValue: number = counter.maxValue; //инициализационное значение приравниваю значению в объекте\n\n    const changeInValueMin = (newValue: number) => {\n        counter.minValue = newValue\n        setCounter({...counter})\n    }//меняем стартовое значение\n    const changeInValueMax = (newValue: number) => {\n        counter.maxValue = newValue\n        setCounter({...counter})\n    }//меняем максимальное значение\n    const incButton = () => {\n        if (minValue <= value && value < maxValue) {\n            setValue(value + 1)\n        }\n    }//увеличиваем значение на 1 при нажание ни кнопку \"inc\"\n\n    const resetButton = () => {\n        setValue(minValue)\n    }//возвращаем стартовое значение при нажатии на кнопку \"reset\"\n    const setButton = () => {\n        setValue(counter.minValue)\n    }//отправляем новое стартовое значение в соунтер\n\n    const disabledIncButton = (value: number) => !!(value === maxValue) //дизэйблим кнопку \"inc\" при достижении макс.значения\n    const disabledResetButton = (value: number) => !!(value === minValue)//дизэйблим кнопку \"reset\" при минимальном значении в инпуте\n    const disabledSetButton = (value: number) => !!(value < 0 && maxValue === minValue) //дизэйблим кнопку \"set\" при минимальном значении в инпуте\n\n    return (\n        <div className={s.App}>\n            <div>\n                <h1>Counter</h1>\n                <div className={s.body}>\n                    <InputComp\n                        value={value}\n                        maxValue={maxValue}\n                    />\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={incButton}\n                            title={'inc'}\n                            value={value}\n                            disabledButton={disabledIncButton}\n                        />\n                        <ButtonComp\n                            clickOnButton={resetButton}\n                            title={'reset'}\n                            value={value}\n                            disabledButton={disabledResetButton}\n                        />\n                    </div>\n                </div>\n            </div>\n\n\n            <div>\n                <h1>Settings</h1>\n                <div className={s.body}>\n                    <InputMaxComp\n                        value={counter.maxValue}\n                        title={'max value: '}\n                        changeInValueMax={changeInValueMax}\n                    />\n                    <InputMinComp\n                        value={counter.minValue}\n                        title={'start value: '}\n                        changeInValueMin={changeInValueMin}\n\n                    />\n\n                    <div className={s.Button}>\n                        <ButtonComp\n                            clickOnButton={setButton}\n                            title={'set'}\n                            value={value}\n                            disabledButton={disabledSetButton}\n                        />\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}